
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/analysis/run_hexReactorToRZ.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gallery_analysis_run_hexReactorToRZ.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_analysis_run_hexReactorToRZ.py:


Hex reactor to RZ geometry conversion
=====================================
This shows how an entire reactor specified in full hex detail can be
automatically converted to a 2-D or 3-D RZ case with conserved mass.

.. warning::
    This uses :py:mod:`armi.reactor.converters.geometryConverters`, which
    will only work on a constrained set of hex-based geometries. For your systems,
    consider these an example and starting point and build your own converters as
    appropriate.

.. GENERATED FROM PYTHON SOURCE LINES 26-59



.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /gallery/analysis/images/sphx_glr_run_hexReactorToRZ_001.png
          :alt: run hexReactorToRZ
          :class: sphx-glr-multi-img

    *

      .. image:: /gallery/analysis/images/sphx_glr_run_hexReactorToRZ_002.png
          :alt: RZ Core Map from 0.0 to 1.0000 revolutions
          :class: sphx-glr-multi-img





.. code-block:: default

    # sphinx_gallery_thumbnail_number=2
    import math

    import matplotlib.pyplot as plt

    from armi.reactor.tests import test_reactors
    from armi.reactor.flags import Flags
    from armi.reactor.converters import geometryConverters
    from armi.utils import plotting
    from armi import configure, runLog

    # configure ARMI
    configure(permissive=True)

    o, r = test_reactors.loadTestReactor()
    kgFis = [a.getHMMass() for a in r.core]
    plotting.plotFaceMap(r.core, data=kgFis, labelFmt="{:.1e}")

    converterSettings = {
        "radialConversionType": "Ring Compositions",
        "axialConversionType": "Axial Coordinates",
        "uniformThetaMesh": True,
        "thetaBins": 1,
        "axialMesh": [50, 100, 150, 175],
        "thetaMesh": [2 * math.pi],
    }

    converter = geometryConverters.HexToRZConverter(o.cs, converterSettings)
    # makes new reactor in converter.convReactor
    converter.convert(r)
    figs = converter.plotConvertedReactor()

    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  5.335 seconds)


.. _sphx_glr_download_gallery_analysis_run_hexReactorToRZ.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: run_hexReactorToRZ.py <run_hexReactorToRZ.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: run_hexReactorToRZ.ipynb <run_hexReactorToRZ.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
