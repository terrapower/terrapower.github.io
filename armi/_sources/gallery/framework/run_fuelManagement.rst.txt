
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/framework/run_fuelManagement.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_framework_run_fuelManagement.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_framework_run_fuelManagement.py:


Fuel management in a LWR.
=========================

Demo of locating and swapping assemblies in a core with Cartesian geometry. Given a burnup
distribution, this swaps high burnup assemblies with low ones.

Assembly selection for moving and swapping is very flexible using the ARMI API and the
high-level language features of Python. This allows highly complex fuel management
algorithms to be expressed and parameterized.

Because the ARMI framework does not come with a LWR global flux/depletion solver, actual
flux/depletion results would need to be provided by a physics plugin before actually using
ARMI to do fuel management. Thus, this example applies a dummy burnup distribution for
demonstration purposes.

.. GENERATED FROM PYTHON SOURCE LINES 30-75



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /gallery/framework/images/sphx_glr_run_fuelManagement_001.png
         :alt: run fuelManagement
         :srcset: /gallery/framework/images/sphx_glr_run_fuelManagement_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /gallery/framework/images/sphx_glr_run_fuelManagement_002.png
         :alt: run fuelManagement
         :srcset: /gallery/framework/images/sphx_glr_run_fuelManagement_002.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    =========== Case Information ===========
    =========== Input File Information ===========
    =========== Reactor Cycle Information ===========
    =========== Constructing Reactor and Verifying Inputs ===========
    =========== Adding Assemblies to <Core: core id:140341638589216> ===========
    =========== Verifying Assembly Configurations ===========
    =========== Summarizing Source of Material Data for <Core: core id:140341638589216> ===========
    =========== Applying Geometry Modifications ===========
    =========== Initializing Mesh, Assembly Zones, and Nuclide Categories ===========
    =========== Creating Interfaces ===========
    =========== Interface Stack Summary  ===========
    ===========  Triggering Init Event ===========
    =========== 01 - main                           Init            ===========
    =========== 02 - fissionProducts                Init            ===========
    =========== 03 - xsGroups                       Init            ===========
    =========== 04 - history                        Init            ===========
    =========== 05 - report                         Init            ===========
    =========== 06 - database                       Init            ===========
    =========== 07 - memoryProfiler                 Init            ===========
    =========== 08 - snapshot                       Init            ===========
    ===========  Completed Init Event ===========






|

.. code-block:: default

    # Tell the gallery to feature the 2nd image
    # sphinx_gallery_thumbnail_number = 2
    import math

    from armi import configure
    from armi.physics.fuelCycle import fuelHandlers
    from armi.reactor.flags import Flags
    from armi.reactor.tests import test_reactors
    from armi.utils import plotting

    # configure ARMI
    configure(permissive=True)

    o, reactor = test_reactors.loadTestReactor(inputFileName="refTestCartesian.yaml")

    # Apply a dummy burnup distribution roughly in a cosine
    for b in reactor.core.getBlocks(Flags.FUEL):
        x, y, z = b.spatialLocator.getGlobalCoordinates()
        d = math.sqrt(x**2 + y**2)
        b.p.percentBu = 5 * math.cos(d * math.pi / 2 / 90)

    # show the initial burnup distribution
    plotting.plotFaceMap(reactor.core, param="percentBu")

    fuelHandler = fuelHandlers.FuelHandler(o)

    candidateAssems = reactor.core.getAssemblies(Flags.FUEL)
    criterion = lambda a: a.getMaxParam("percentBu")
    candidateAssems.sort(key=criterion)

    for num in range(12):
        # swap the 12 highest burnup assemblies with the 12 lowest burnup ones
        high = candidateAssems.pop()
        low = candidateAssems.pop(0)
        fuelHandler.swapAssemblies(high, low)

    # re-filter the remaining candidates for more complex selections
    candidateAssems = [a for a in candidateAssems if a.getMaxParam("percentBu") < 4.0]
    for num in range(8):
        high = candidateAssems.pop()
        low = candidateAssems.pop(0)
        fuelHandler.swapAssemblies(high, low)

    # show final burnup distribution
    plotting.plotFaceMap(reactor.core, param="percentBu")


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.947 seconds)


.. _sphx_glr_download_gallery_framework_run_fuelManagement.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: run_fuelManagement.py <run_fuelManagement.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: run_fuelManagement.ipynb <run_fuelManagement.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
