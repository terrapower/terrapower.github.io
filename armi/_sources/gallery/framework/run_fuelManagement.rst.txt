
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/framework/run_fuelManagement.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gallery_framework_run_fuelManagement.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_framework_run_fuelManagement.py:


Fuel management in a LWR
========================

Demo of locating and swapping assemblies in a core with Cartesian geometry. Given a burnup
distribution, this swaps high burnup assemblies with low ones.

Assembly selection for moving and swapping is very flexible using the ARMI API and the
high-level language features of Python. This allows highly complex fuel management
algorithms to be expressed and parameterized.

Because the ARMI framework does not come with a LWR global flux/depletion solver, actual
flux/depletion results would need to be provided by a physics plugin before actually using
ARMI to do fuel management. Thus, this example applies a dummy burnup distribution for
demonstration purposes.

.. GENERATED FROM PYTHON SOURCE LINES 18-63


.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "/home/runner/work/armi/armi/doc/gallery-src/framework/run_fuelManagement.py", line 31, in <module>
        o, reactor = test_reactors.loadTestReactor(inputFileName="refTestCartesian.yaml")
      File "/home/runner/work/armi/armi/armi/reactor/tests/test_reactors.py", line 176, in loadTestReactor
        o = operators.factory(cs)
      File "/home/runner/work/armi/armi/armi/operators/__init__.py", line 52, in factory
        return getOperatorClassFromSettings(cs)(cs)
      File "/home/runner/work/armi/armi/armi/operators/operator.py", line 110, in __init__
        reportingUtils.writeWelcomeHeaders(self, cs)
      File "/home/runner/work/armi/armi/armi/bookkeeping/report/reportingUtils.py", line 201, in writeWelcomeHeaders
        _writeCaseInformation(o, cs)
      File "/home/runner/work/armi/armi/armi/bookkeeping/report/reportingUtils.py", line 85, in _writeCaseInformation
        runLog.header("=========== Case Information ===========")
      File "/home/runner/work/armi/armi/armi/runLog.py", line 384, in header
        LOG.log("header", msg, single=single, label=label)
      File "/home/runner/work/armi/armi/armi/runLog.py", line 163, in log
        self.logger.log(msgLevel, msg, single=single, label=label)
      File "/opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/logging/__init__.py", line 1512, in log
        self._log(level, msg, args, **kwargs)
    TypeError: _log() got an unexpected keyword argument 'single'






|

.. code-block:: default

    # Tell the gallery to feature the 2nd image
    # sphinx_gallery_thumbnail_number = 2
    import math

    from armi.reactor.flags import Flags
    from armi.reactor.tests import test_reactors
    from armi.physics.fuelCycle import fuelHandlers
    from armi.utils import plotting

    from armi import configure

    configure(permissive=True)

    o, reactor = test_reactors.loadTestReactor(inputFileName="refTestCartesian.yaml")

    # Apply a dummy burnup distribution roughly in a cosine
    for b in reactor.core.getBlocks(Flags.FUEL):
        x, y, z = b.spatialLocator.getGlobalCoordinates()
        d = math.sqrt(x ** 2 + y ** 2)
        b.p.percentBu = 5 * math.cos(d * math.pi / 2 / 90)

    # show the initial burnup distribution
    plotting.plotFaceMap(reactor.core, param="percentBu")

    fuelHandler = fuelHandlers.FuelHandler(o)

    candidateAssems = reactor.core.getAssemblies(Flags.FUEL)
    criterion = lambda a: a.getMaxParam("percentBu")
    candidateAssems.sort(key=criterion)

    for num in range(12):
        # swap the 12 highest burnup assemblies with the 12 lowest burnup ones
        high = candidateAssems.pop()
        low = candidateAssems.pop(0)
        fuelHandler.swapAssemblies(high, low)

    # re-filter the remaining candidates for more complex selections
    candidateAssems = [a for a in candidateAssems if a.getMaxParam("percentBu") < 4.0]
    for num in range(8):
        high = candidateAssems.pop()
        low = candidateAssems.pop(0)
        fuelHandler.swapAssemblies(high, low)

    # show final burnup distribution
    plotting.plotFaceMap(reactor.core, param="percentBu")


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.019 seconds)


.. _sphx_glr_download_gallery_framework_run_fuelManagement.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: run_fuelManagement.py <run_fuelManagement.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: run_fuelManagement.ipynb <run_fuelManagement.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
